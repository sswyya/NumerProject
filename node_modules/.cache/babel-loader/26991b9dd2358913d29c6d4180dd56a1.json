{"ast":null,"code":"import _defineProperty from \"C:\\\\Users\\\\Lenovo\\\\OneDrive\\\\\\u0E40\\u0E14\\u0E2A\\u0E01\\u0E4C\\u0E17\\u0E47\\u0E2D\\u0E1B\\\\Numerical-method-final\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"C:\\\\Users\\\\Lenovo\\\\OneDrive\\\\\\u0E40\\u0E14\\u0E2A\\u0E01\\u0E4C\\u0E17\\u0E47\\u0E2D\\u0E1B\\\\Numerical-method-final\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\Lenovo\\\\OneDrive\\\\\\u0E40\\u0E14\\u0E2A\\u0E01\\u0E4C\\u0E17\\u0E47\\u0E2D\\u0E1B\\\\Numerical-method-final\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\Lenovo\\\\OneDrive\\\\\\u0E40\\u0E14\\u0E2A\\u0E01\\u0E4C\\u0E17\\u0E47\\u0E2D\\u0E1B\\\\Numerical-method-final\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\Lenovo\\\\OneDrive\\\\\\u0E40\\u0E14\\u0E2A\\u0E01\\u0E4C\\u0E17\\u0E47\\u0E2D\\u0E1B\\\\Numerical-method-final\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\Lenovo\\\\OneDrive\\\\\\u0E40\\u0E14\\u0E2A\\u0E01\\u0E4C\\u0E17\\u0E47\\u0E2D\\u0E1B\\\\Numerical-method-final\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"C:\\\\Users\\\\Lenovo\\\\OneDrive\\\\\\u0E40\\u0E14\\u0E2A\\u0E01\\u0E4C\\u0E17\\u0E47\\u0E2D\\u0E1B\\\\Numerical-method-final\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"C:\\\\Users\\\\Lenovo\\\\OneDrive\\\\\\u0E40\\u0E14\\u0E2A\\u0E01\\u0E4C\\u0E17\\u0E47\\u0E2D\\u0E1B\\\\Numerical-method-final\\\\src\\\\Linear Algebra\\\\Jacobi.js\";\nimport React, { Component } from 'react';\nimport { Card, Input, Button, Table } from 'antd';\nimport '../screen.css';\nimport 'antd/dist/antd.css';\nvar InputStyle = {\n  background: \"#1890ff\",\n  color: \"white\",\n  fontWeight: \"bold\",\n  fontSize: \"24px\"\n};\nvar A = [],\n    B = [],\n    matrixA = [],\n    matrixB = [],\n    x,\n    epsilon,\n    dataInTable = [],\n    count = 1,\n    matrixX = [];\nvar columns = [{\n  title: \"Iteration\",\n  dataIndex: \"iteration\",\n  key: \"iteration\"\n}];\n\nvar Jacobi =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Jacobi, _Component);\n\n  function Jacobi() {\n    var _this;\n\n    _classCallCheck(this, Jacobi);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Jacobi).call(this));\n    _this.state = {\n      row: 0,\n      column: 0,\n      showDimentionForm: true,\n      showDimentionButton: true,\n      showMatrixForm: false,\n      showMatrixButton: false,\n      showOutputCard: false\n    };\n    _this.handleChange = _this.handleChange.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.jacobi = _this.jacobi.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(Jacobi, [{\n    key: \"jacobi\",\n    value: function jacobi(n) {\n      this.initMatrix();\n      var temp;\n      var xold;\n      epsilon = new Array(n);\n\n      do {\n        temp = [];\n        xold = JSON.parse(JSON.stringify(x));\n\n        for (var i = 0; i < n; i++) {\n          var sum = 0;\n\n          for (var j = 0; j < n; j++) {\n            if (i !== j) {\n              //else i == j That is a divide number\n              sum = sum + A[i][j] * x[j];\n            }\n          }\n\n          temp[i] = (B[i] - sum) / A[i][i]; //update x[i]\n        }\n\n        x = JSON.parse(JSON.stringify(temp));\n      } while (this.error(x, xold)); //if true , continue next iteration\n\n      /*\r\n      \r\n      for (i=0 ; i<x.length ; i++) {\r\n              output.push(x[i]);\r\n              output.push(<br/>);\r\n      }*/\n\n\n      this.setState({\n        showOutputCard: true\n      });\n    }\n  }, {\n    key: \"error\",\n    value: function error(xnew, xold) {\n      for (var i = 0; i < xnew.length; i++) {\n        epsilon[i] = Math.abs((xnew[i] - xold[i]) / xnew[i]);\n      }\n\n      this.appendTable(x, epsilon);\n\n      for (i = 0; i < epsilon.length; i++) {\n        if (epsilon[i] > 0.000001) {\n          return true;\n        }\n      }\n\n      return false;\n    }\n  }, {\n    key: \"createMatrix\",\n    value: function createMatrix(row, column) {\n      A = [];\n      B = [];\n      matrixA = [];\n      matrixB = [];\n      x = [];\n      dataInTable = [];\n\n      for (var i = 1; i <= row; i++) {\n        for (var j = 1; j <= column; j++) {\n          matrixA.push(React.createElement(Input, {\n            style: {\n              width: \"18%\",\n              height: \"50%\",\n              backgroundColor: \"#06d9a0\",\n              marginInlineEnd: \"5%\",\n              marginBlockEnd: \"5%\",\n              color: \"white\",\n              fontSize: \"18px\",\n              fontWeight: \"bold\"\n            },\n            id: \"a\" + i + \"\" + j,\n            key: \"a\" + i + \"\" + j,\n            placeholder: \"a\" + i + \"\" + j,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 94\n            },\n            __self: this\n          }));\n        }\n\n        matrixA.push(React.createElement(\"br\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 106\n          },\n          __self: this\n        }));\n        matrixB.push(React.createElement(Input, {\n          style: {\n            width: \"18%\",\n            height: \"50%\",\n            backgroundColor: \"black\",\n            marginInlineEnd: \"5%\",\n            marginBlockEnd: \"5%\",\n            color: \"white\",\n            fontSize: \"18px\",\n            fontWeight: \"bold\"\n          },\n          id: \"b\" + i,\n          key: \"b\" + i,\n          placeholder: \"b\" + i,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 107\n          },\n          __self: this\n        }));\n        matrixX.push(React.createElement(Input, {\n          style: {\n            width: \"18%\",\n            height: \"50%\",\n            backgroundColor: \"black\",\n            marginInlineEnd: \"5%\",\n            marginBlockEnd: \"5%\",\n            color: \"white\",\n            fontSize: \"18px\",\n            fontWeight: \"bold\"\n          },\n          id: \"x\" + i,\n          key: \"x\" + i,\n          placeholder: \"x\" + i,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 118\n          },\n          __self: this\n        }));\n      }\n\n      this.setState({\n        showDimentionForm: false,\n        showDimentionButton: false,\n        showMatrixForm: true,\n        showMatrixButton: true\n      });\n    }\n  }, {\n    key: \"initMatrix\",\n    value: function initMatrix() {\n      for (var i = 0; i < this.state.row; i++) {\n        A[i] = [];\n\n        for (var j = 0; j < this.state.column; j++) {\n          A[i][j] = parseFloat(document.getElementById(\"a\" + (i + 1) + \"\" + (j + 1)).value);\n        }\n\n        B.push(parseFloat(document.getElementById(\"b\" + (i + 1)).value));\n        x.push(parseFloat(document.getElementById(\"x\" + (i + 1)).value));\n      }\n    }\n  }, {\n    key: \"initialSchema\",\n    value: function initialSchema(n) {\n      for (var i = 1; i <= n; i++) {\n        columns.push({\n          title: \"X\" + i,\n          dataIndex: \"x\" + i,\n          key: \"x\" + i\n        });\n      }\n\n      for (i = 1; i <= n; i++) {\n        columns.push({\n          title: \"Error\" + i,\n          dataIndex: \"error\" + i,\n          key: \"error\" + i\n        });\n      }\n    }\n  }, {\n    key: \"appendTable\",\n    value: function appendTable(x, error) {\n      var tag = '';\n      tag += '{\"iteration\": ' + count++ + ',';\n\n      for (var i = 0; i < x.length; i++) {\n        tag += '\"x' + (i + 1) + '\": ' + x[i].toFixed(8) + ', \"error' + (i + 1) + '\": ' + error[i].toFixed(8);\n\n        if (i !== x.length - 1) {\n          tag += ',';\n        }\n      }\n\n      tag += '}';\n      dataInTable.push(JSON.parse(tag));\n    }\n  }, {\n    key: \"handleChange\",\n    value: function handleChange(event) {\n      this.setState(_defineProperty({}, event.target.name, event.target.value));\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(\"div\", {\n        style: {\n          background: \"#FFFF\",\n          padding: \"30px\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 188\n        },\n        __self: this\n      }, React.createElement(\"h2\", {\n        style: {\n          color: \"black\",\n          fontWeight: \"bold\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 189\n        },\n        __self: this\n      }, \"Jacobi Iteration Method\"), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 190\n        },\n        __self: this\n      }, React.createElement(Card, {\n        bordered: true,\n        style: {\n          width: 400,\n          background: \"#f44336\",\n          color: \"#FFFFFFFF\"\n        },\n        onChange: this.handleChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 191\n        },\n        __self: this\n      }, this.state.showMatrixForm && React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 196\n        },\n        __self: this\n      }, React.createElement(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 196\n        },\n        __self: this\n      }, \"Matrix [A]\"), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 196\n        },\n        __self: this\n      }), matrixA, React.createElement(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 196\n        },\n        __self: this\n      }, \"Vector [B]\", React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 196\n        },\n        __self: this\n      })), matrixB, React.createElement(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 196\n        },\n        __self: this\n      }, \"Initial X\", React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 196\n        },\n        __self: this\n      })), matrixX), this.state.showDimentionForm && React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 199\n        },\n        __self: this\n      }, React.createElement(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 200\n        },\n        __self: this\n      }, \"Row\"), React.createElement(Input, {\n        size: \"large\",\n        name: \"row\",\n        style: InputStyle,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 200\n        },\n        __self: this\n      }), React.createElement(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 201\n        },\n        __self: this\n      }, \"Column\"), React.createElement(Input, {\n        size: \"large\",\n        name: \"column\",\n        style: InputStyle,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 201\n        },\n        __self: this\n      })), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 204\n        },\n        __self: this\n      }), this.state.showDimentionButton && React.createElement(Button, {\n        id: \"dimention_button\",\n        onClick: function onClick() {\n          _this2.createMatrix(_this2.state.row, _this2.state.column);\n\n          _this2.initialSchema(_this2.state.row);\n        },\n        style: {\n          background: \"#4caf50\",\n          color: \"white\",\n          fontSize: \"20px\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 206\n        },\n        __self: this\n      }, \"Submit\", React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 211\n        },\n        __self: this\n      })), this.state.showMatrixButton && React.createElement(Button, {\n        id: \"matrix_button\",\n        style: {\n          background: \"blue\",\n          color: \"white\",\n          fontSize: \"20px\"\n        },\n        onClick: function onClick() {\n          return _this2.jacobi(parseInt(_this2.state.row));\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 215\n        },\n        __self: this\n      }, \"Submit\")), this.state.showOutputCard && React.createElement(Card, {\n        title: \"Output\",\n        bordered: true,\n        style: {\n          width: \"100%\",\n          background: \"#2196f3\",\n          color: \"#FFFFFFFF\",\n          float: \"inline-start\",\n          marginBlockStart: \"2%\"\n        },\n        id: \"outputCard\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 227\n        },\n        __self: this\n      }, React.createElement(Table, {\n        columns: columns,\n        bordered: true,\n        dataSource: dataInTable,\n        bodyStyle: {\n          fontWeight: \"bold\",\n          fontSize: \"18px\",\n          color: \"black\",\n          overflowX: \"scroll\",\n          border: \"2px solid white\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 233\n        },\n        __self: this\n      }))));\n    }\n  }]);\n\n  return Jacobi;\n}(Component);\n\nexport default Jacobi;","map":{"version":3,"sources":["C:\\Users\\Lenovo\\OneDrive\\เดสก์ท็อป\\Numerical-method-final\\src\\Linear Algebra\\Jacobi.js"],"names":["React","Component","Card","Input","Button","Table","InputStyle","background","color","fontWeight","fontSize","A","B","matrixA","matrixB","x","epsilon","dataInTable","count","matrixX","columns","title","dataIndex","key","Jacobi","state","row","column","showDimentionForm","showDimentionButton","showMatrixForm","showMatrixButton","showOutputCard","handleChange","bind","jacobi","n","initMatrix","temp","xold","Array","JSON","parse","stringify","i","sum","j","error","setState","xnew","length","Math","abs","appendTable","push","width","height","backgroundColor","marginInlineEnd","marginBlockEnd","parseFloat","document","getElementById","value","tag","toFixed","event","target","name","padding","createMatrix","initialSchema","parseInt","float","marginBlockStart","overflowX","border"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\r\nimport {Card, Input, Button, Table} from 'antd';\r\nimport '../screen.css';\r\nimport 'antd/dist/antd.css';\r\nconst InputStyle = {\r\n    background: \"#1890ff\",\r\n    color: \"white\", \r\n    fontWeight: \"bold\", \r\n    fontSize: \"24px\"\r\n\r\n};\r\n\r\n\r\nvar A = [], B = [], matrixA = [], matrixB = [], x , epsilon, dataInTable = [], count=1, matrixX = []\r\nvar columns = [\r\n    {\r\n      title: \"Iteration\",\r\n      dataIndex: \"iteration\",\r\n      key: \"iteration\"\r\n    }\r\n];\r\nclass Jacobi extends Component {\r\n    \r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            row: 0,\r\n            column: 0,\r\n            showDimentionForm : true,\r\n            showDimentionButton: true,\r\n            showMatrixForm: false,\r\n            showMatrixButton: false,\r\n            showOutputCard: false\r\n        }\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.jacobi = this.jacobi.bind(this);\r\n    \r\n    }\r\n\r\n  \r\n    jacobi(n) {\r\n        this.initMatrix();\r\n        var temp;\r\n        var xold;\r\n        epsilon = new Array(n);\r\n        do {\r\n            temp = [];\r\n            xold = JSON.parse(JSON.stringify(x));\r\n            for (var i=0 ; i<n ; i++) {\r\n                var sum = 0;\r\n                for (var j=0 ; j<n ; j++) {\r\n                    if (i !== j) { //else i == j That is a divide number\r\n                        sum = sum + A[i][j]*x[j];\r\n                    }\r\n                }\r\n                temp[i] = (B[i] - sum)/A[i][i]; //update x[i]\r\n                \r\n            }        \r\n            x = JSON.parse(JSON.stringify(temp));\r\n        } while(this.error(x, xold)); //if true , continue next iteration\r\n        /*\r\n        \r\n        for (i=0 ; i<x.length ; i++) {\r\n                output.push(x[i]);\r\n                output.push(<br/>);\r\n        }*/\r\n        this.setState({\r\n            showOutputCard: true\r\n        });\r\n\r\n      \r\n    }\r\n    error(xnew, xold) {\r\n        for (var i=0 ; i<xnew.length ; i++) {\r\n            epsilon[i] = Math.abs((xnew[i]-xold[i]) / xnew[i])\r\n        }\r\n        this.appendTable(x, epsilon);\r\n        for (i=0 ; i<epsilon.length ; i++) {\r\n            if (epsilon[i] > 0.000001) {\r\n                return true;\r\n            }    \r\n        }\r\n        return false;  \r\n    }   \r\n    createMatrix(row, column) {\r\n        A = []\r\n        B = []\r\n        matrixA = []\r\n        matrixB = []\r\n        x = []\r\n        dataInTable = []\r\n        for (var i=1 ; i<=row ; i++) {\r\n            for (var j=1 ; j<=column ; j++) {\r\n                matrixA.push(<Input style={{\r\n                    width: \"18%\",\r\n                    height: \"50%\", \r\n                    backgroundColor:\"#06d9a0\", \r\n                    marginInlineEnd: \"5%\", \r\n                    marginBlockEnd: \"5%\",\r\n                    color: \"white\",\r\n                    fontSize: \"18px\",\r\n                    fontWeight: \"bold\"\r\n                }} \r\n                id={\"a\"+i+\"\"+j} key={\"a\"+i+\"\"+j} placeholder={\"a\"+i+\"\"+j} />)  \r\n            }\r\n            matrixA.push(<br/>)\r\n            matrixB.push(<Input style={{\r\n                width: \"18%\",\r\n                height: \"50%\", \r\n                backgroundColor:\"black\", \r\n                marginInlineEnd: \"5%\", \r\n                marginBlockEnd: \"5%\",\r\n                color: \"white\",\r\n                fontSize: \"18px\",\r\n                fontWeight: \"bold\"\r\n            }} \r\n            id={\"b\"+i} key={\"b\"+i} placeholder={\"b\"+i} />)\r\n            matrixX.push(<Input style={{\r\n                width: \"18%\",\r\n                height: \"50%\", \r\n                backgroundColor:\"black\", \r\n                marginInlineEnd: \"5%\", \r\n                marginBlockEnd: \"5%\",\r\n                color: \"white\",\r\n                fontSize: \"18px\",\r\n                fontWeight: \"bold\"\r\n            }} \r\n            id={\"x\"+i} key={\"x\"+i} placeholder={\"x\"+i} />)  \r\n            \r\n        }\r\n\r\n        this.setState({\r\n            showDimentionForm: false,\r\n            showDimentionButton: false,\r\n            showMatrixForm: true,\r\n            showMatrixButton: true\r\n        })\r\n\r\n        \r\n\r\n    }\r\n    initMatrix() {\r\n        for(var i=0 ; i<this.state.row ; i++) {\r\n            A[i] = []\r\n            for(var j=0 ; j<this.state.column ; j++) {\r\n                A[i][j] = (parseFloat(document.getElementById(\"a\"+(i+1)+\"\"+(j+1)).value));\r\n            }\r\n            B.push(parseFloat(document.getElementById(\"b\"+(i+1)).value));\r\n            x.push(parseFloat(document.getElementById(\"x\"+(i+1)).value));\r\n        }\r\n    }\r\n    initialSchema(n) {\r\n        for (var i=1 ; i<=n ; i++) {\r\n            columns.push({\r\n                title: \"X\"+i,\r\n                dataIndex: \"x\"+i,\r\n                key: \"x\"+i\r\n            },)\r\n        }\r\n        for (i=1 ; i<=n ; i++) {\r\n            columns.push({\r\n                title: \"Error\"+i,\r\n                dataIndex: \"error\"+i,\r\n                key: \"error\"+i\r\n            },)\r\n        }\r\n    }\r\n    appendTable(x, error) {\r\n        var tag = ''\r\n        tag += '{\"iteration\": ' + count++ + ',';\r\n        for (var i=0 ; i<x.length ; i++) {\r\n            tag += '\"x'+(i+1)+'\": '+x[i].toFixed(8)+', \"error'+(i+1)+'\": ' + error[i].toFixed(8);\r\n            if (i !== x.length-1) {\r\n                tag += ','\r\n            }\r\n        }\r\n        tag += '}';\r\n        dataInTable.push(JSON.parse(tag));  \r\n    }\r\n\r\n    handleChange(event) {\r\n        this.setState({\r\n            [event.target.name]: event.target.value\r\n        });\r\n    }\r\n    render() {\r\n        return(\r\n            <div style={{ background: \"#FFFF\", padding: \"30px\" }}>\r\n                <h2 style={{color: \"black\", fontWeight: \"bold\"}}>Jacobi Iteration Method</h2>\r\n                <div>\r\n                    <Card\r\n                      bordered={true}\r\n                      style={{ width: 400, background: \"#f44336\", color: \"#FFFFFFFF\"}}\r\n                      onChange={this.handleChange}\r\n                    >\r\n                        {this.state.showMatrixForm && <div><h2>Matrix [A]</h2><br/>{matrixA}<h2>Vector [B]<br/></h2>{matrixB}<h2>Initial X<br/></h2>{matrixX}</div>}\r\n                        \r\n                        {this.state.showDimentionForm && \r\n                            <div>\r\n                                <h2>Row</h2><Input size=\"large\" name=\"row\" style={InputStyle}></Input>\r\n                                <h2>Column</h2><Input size=\"large\" name=\"column\" style={InputStyle}></Input>\r\n                            </div> \r\n                        }\r\n                        <br></br>\r\n                        {this.state.showDimentionButton && \r\n                            <Button id=\"dimention_button\" onClick= {\r\n                                ()=>{this.createMatrix(this.state.row, this.state.column);\r\n                                     this.initialSchema(this.state.row)}\r\n                                }  \r\n                                style={{background: \"#4caf50\", color: \"white\", fontSize: \"20px\"}}>\r\n                                Submit<br></br>\r\n                                </Button>\r\n                        }\r\n                        {this.state.showMatrixButton && \r\n                            <Button \r\n                                id=\"matrix_button\"  \r\n                                style={{background: \"blue\", color: \"white\", fontSize: \"20px\"}}\r\n                                onClick={()=>this.jacobi(parseInt(this.state.row))}>\r\n                                Submit\r\n                            </Button>\r\n                        }\r\n                        \r\n                    </Card>\r\n                    \r\n\r\n                    {this.state.showOutputCard && \r\n                        <Card\r\n                        title={\"Output\"}\r\n                        bordered={true}\r\n                        style={{width: \"100%\", background: \"#2196f3\", color: \"#FFFFFFFF\", float:\"inline-start\", marginBlockStart:\"2%\"}}\r\n                        id=\"outputCard\"\r\n                        >\r\n                            <Table columns={columns} bordered dataSource={dataInTable} bodyStyle={{fontWeight: \"bold\", fontSize: \"18px\", color: \"black\", overflowX: \"scroll\", border:\"2px solid white\"}}\r\n                            ></Table>\r\n                        </Card>\r\n                    }   \r\n\r\n                   \r\n                </div>\r\n\r\n                \r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default Jacobi;\r\n\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}