{"ast":null,"code":"import _defineProperty from \"C:\\\\Users\\\\Lenovo\\\\OneDrive\\\\\\u0E40\\u0E14\\u0E2A\\u0E01\\u0E4C\\u0E17\\u0E47\\u0E2D\\u0E1B\\\\Numerical-method-final\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"C:\\\\Users\\\\Lenovo\\\\OneDrive\\\\\\u0E40\\u0E14\\u0E2A\\u0E01\\u0E4C\\u0E17\\u0E47\\u0E2D\\u0E1B\\\\Numerical-method-final\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\Lenovo\\\\OneDrive\\\\\\u0E40\\u0E14\\u0E2A\\u0E01\\u0E4C\\u0E17\\u0E47\\u0E2D\\u0E1B\\\\Numerical-method-final\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\Lenovo\\\\OneDrive\\\\\\u0E40\\u0E14\\u0E2A\\u0E01\\u0E4C\\u0E17\\u0E47\\u0E2D\\u0E1B\\\\Numerical-method-final\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\Lenovo\\\\OneDrive\\\\\\u0E40\\u0E14\\u0E2A\\u0E01\\u0E4C\\u0E17\\u0E47\\u0E2D\\u0E1B\\\\Numerical-method-final\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\Lenovo\\\\OneDrive\\\\\\u0E40\\u0E14\\u0E2A\\u0E01\\u0E4C\\u0E17\\u0E47\\u0E2D\\u0E1B\\\\Numerical-method-final\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"C:\\\\Users\\\\Lenovo\\\\OneDrive\\\\\\u0E40\\u0E14\\u0E2A\\u0E01\\u0E4C\\u0E17\\u0E47\\u0E2D\\u0E1B\\\\Numerical-method-final\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"C:\\\\Users\\\\Lenovo\\\\OneDrive\\\\\\u0E40\\u0E14\\u0E2A\\u0E01\\u0E4C\\u0E17\\u0E47\\u0E2D\\u0E1B\\\\Numerical-method-final\\\\src\\\\Linear Algebra\\\\Inverse.js\";\nimport React, { Component } from 'react';\nimport { Card, Input, Button } from 'antd';\nimport '../screen.css';\nimport 'antd/dist/antd.css';\nimport math from 'mathjs';\nvar InputStyle = {\n  background: \"#F690BB\",\n  color: \"white\",\n  fontWeight: \"bold\",\n  fontSize: \"24px\"\n};\nvar A = [],\n    B = [],\n    matrixA = [],\n    matrixB = [],\n    output = [],\n    answer;\n\nvar Inverse =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Inverse, _Component);\n\n  function Inverse() {\n    var _this;\n\n    _classCallCheck(this, Inverse);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Inverse).call(this));\n    _this.state = {\n      row: 0,\n      column: 0,\n      showDimentionForm: true,\n      showDimentionButton: true,\n      showMatrixForm: false,\n      showMatrixButton: false,\n      showOutputCard: false\n    };\n    _this.handleChange = _this.handleChange.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.inverse = _this.inverse.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(Inverse, [{\n    key: \"inverse\",\n    value: function inverse(n) {\n      this.initMatrix();\n\n      try {\n        A = math.inv(A);\n        answer = math.multiply(A, B);\n\n        for (var i = 0; i < n; i++) {\n          for (var j = 0; j < n; j++) {\n            if (!Number.isInteger(A[i][j])) {\n              A[i][j] = this.printFraction(math.fraction(A[i][j]));\n            }\n          }\n        }\n\n        for (i = 0; i < n; i++) {\n          for (j = 0; j < n; j++) {\n            output.push(A[i][j]);\n            output.push(\"  \");\n          }\n\n          output.push(React.createElement(\"br\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 52\n            },\n            __self: this\n          }));\n        }\n      } catch (error) {\n        output.push(\"Matrix doesn't exist, Determinant is zero\");\n      }\n\n      this.setState({\n        showOutputCard: true\n      });\n    }\n  }, {\n    key: \"printFraction\",\n    value: function printFraction(value) {\n      return math.format(value, {\n        fraction: 'ratio'\n      });\n    }\n  }, {\n    key: \"createMatrix\",\n    value: function createMatrix(row, column) {\n      for (var i = 1; i <= row; i++) {\n        for (var j = 1; j <= column; j++) {\n          matrixA.push(React.createElement(Input, {\n            style: {\n              width: \"18%\",\n              height: \"50%\",\n              backgroundColor: \"#06d9a0\",\n              marginInlineEnd: \"5%\",\n              marginBlockEnd: \"5%\",\n              color: \"white\",\n              fontSize: \"18px\",\n              fontWeight: \"bold\"\n            },\n            id: \"a\" + i + \"\" + j,\n            key: \"a\" + i + \"\" + j,\n            placeholder: \"a\" + i + \"\" + j,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 70\n            },\n            __self: this\n          }));\n        }\n\n        matrixA.push(React.createElement(\"br\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 82\n          },\n          __self: this\n        }));\n        matrixB.push(React.createElement(Input, {\n          style: {\n            width: \"18%\",\n            height: \"50%\",\n            backgroundColor: \"black\",\n            marginInlineEnd: \"5%\",\n            marginBlockEnd: \"5%\",\n            color: \"white\",\n            fontSize: \"18px\",\n            fontWeight: \"bold\"\n          },\n          id: \"b\" + i,\n          key: \"b\" + i,\n          placeholder: \"b\" + i,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 83\n          },\n          __self: this\n        }));\n      }\n\n      this.setState({\n        showDimentionForm: false,\n        showDimentionButton: false,\n        showMatrixForm: true,\n        showMatrixButton: true\n      });\n    }\n  }, {\n    key: \"initMatrix\",\n    value: function initMatrix() {\n      for (var i = 0; i < this.state.row; i++) {\n        A[i] = [];\n\n        for (var j = 0; j < this.state.column; j++) {\n          A[i][j] = parseFloat(document.getElementById(\"a\" + (i + 1) + \"\" + (j + 1)).value);\n        }\n\n        B.push(parseFloat(document.getElementById(\"b\" + (i + 1)).value));\n      }\n    }\n  }, {\n    key: \"handleChange\",\n    value: function handleChange(event) {\n      this.setState(_defineProperty({}, event.target.name, event.target.value));\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(\"div\", {\n        style: {\n          background: \"#FFFF\",\n          padding: \"30px\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124\n        },\n        __self: this\n      }, React.createElement(\"h2\", {\n        style: {\n          color: \"black\",\n          fontWeight: \"bold\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125\n        },\n        __self: this\n      }, \"Matrix Inversion\"), React.createElement(Card, {\n        bordered: true,\n        style: {\n          width: 400,\n          background: \"#b39eb5\",\n          color: \"#FFFFFFFF\"\n        },\n        onChange: this.handleChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 127\n        },\n        __self: this\n      }, this.state.showMatrixForm && React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 132\n        },\n        __self: this\n      }, React.createElement(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 132\n        },\n        __self: this\n      }, \"Matrix [A]\"), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 132\n        },\n        __self: this\n      }), matrixA, React.createElement(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 132\n        },\n        __self: this\n      }, \"Vector [B]\", React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 132\n        },\n        __self: this\n      })), matrixB), this.state.showDimentionForm && React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 135\n        },\n        __self: this\n      }, React.createElement(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 136\n        },\n        __self: this\n      }, \"Row\"), React.createElement(Input, {\n        size: \"large\",\n        name: \"row\",\n        style: InputStyle,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 136\n        },\n        __self: this\n      }), React.createElement(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 137\n        },\n        __self: this\n      }, \"Column\"), React.createElement(Input, {\n        size: \"large\",\n        name: \"column\",\n        style: InputStyle,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 137\n        },\n        __self: this\n      })), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 140\n        },\n        __self: this\n      }), this.state.showDimentionButton && React.createElement(Button, {\n        id: \"dimention_button\",\n        onClick: function onClick() {\n          return _this2.createMatrix(_this2.state.row, _this2.state.column);\n        },\n        style: {\n          background: \"#4caf50\",\n          color: \"white\",\n          fontSize: \"20px\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 142\n        },\n        __self: this\n      }, \"Submit\", React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 146\n        },\n        __self: this\n      })), this.state.showMatrixButton && React.createElement(Button, {\n        id: \"matrix_button\",\n        style: {\n          background: \"blue\",\n          color: \"white\",\n          fontSize: \"20px\"\n        },\n        onClick: function onClick() {\n          return _this2.inverse(_this2.state.row);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 150\n        },\n        __self: this\n      }, \"Submit\")), this.state.showOutputCard && React.createElement(Card, {\n        title: \"Output\",\n        bordered: true,\n        style: {\n          width: 400,\n          background: \"#b39eb5\",\n          color: \"#FFFFFFFF\",\n          float: \"left\"\n        },\n        onChange: this.handleChange,\n        id: \"answerCard\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 161\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        style: {\n          fontSize: \"24px\",\n          fontWeight: \"bold\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 166\n        },\n        __self: this\n      }, output), React.createElement(\"p\", {\n        style: {\n          fontSize: \"24px\",\n          fontWeight: \"bold\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 167\n        },\n        __self: this\n      }, \"X = \", JSON.stringify(answer))));\n    }\n  }]);\n\n  return Inverse;\n}(Component);\n\nexport default Inverse;","map":{"version":3,"sources":["C:\\Users\\Lenovo\\OneDrive\\เดสก์ท็อป\\Numerical-method-final\\src\\Linear Algebra\\Inverse.js"],"names":["React","Component","Card","Input","Button","math","InputStyle","background","color","fontWeight","fontSize","A","B","matrixA","matrixB","output","answer","Inverse","state","row","column","showDimentionForm","showDimentionButton","showMatrixForm","showMatrixButton","showOutputCard","handleChange","bind","inverse","n","initMatrix","inv","multiply","i","j","Number","isInteger","printFraction","fraction","push","error","setState","value","format","width","height","backgroundColor","marginInlineEnd","marginBlockEnd","parseFloat","document","getElementById","event","target","name","padding","createMatrix","float","JSON","stringify"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\r\nimport {Card, Input, Button} from 'antd';\r\nimport '../screen.css';\r\nimport 'antd/dist/antd.css';\r\nimport math from 'mathjs';\r\nconst InputStyle = {\r\n    background: \"#F690BB\",\r\n    color: \"white\", \r\n    fontWeight: \"bold\", \r\n    fontSize: \"24px\"\r\n\r\n};\r\n\r\nvar A = [], B = [], matrixA = [], matrixB = [], output = [], answer\r\n\r\nclass Inverse extends Component {\r\n    \r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            row: 0,\r\n            column: 0,\r\n            showDimentionForm : true,\r\n            showDimentionButton: true,\r\n            showMatrixForm: false,\r\n            showMatrixButton: false,\r\n            showOutputCard: false\r\n        }\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.inverse = this.inverse.bind(this);\r\n    \r\n    }\r\n\r\n    inverse(n) {\r\n        this.initMatrix();\r\n        try {\r\n            A = math.inv(A);\r\n            answer = math.multiply(A, B)\r\n            for (var i=0 ; i<n ; i++) {\r\n                for (var j=0 ; j<n ; j++) {\r\n                    if (!Number.isInteger(A[i][j])) {\r\n                        A[i][j] = this.printFraction(math.fraction(A[i][j]));\r\n                    }\r\n                    \r\n                }\r\n            }\r\n            for (i=0 ; i<n ; i++) {\r\n                for(j=0 ; j<n ; j++) {\r\n                    output.push(A[i][j]);\r\n                    output.push(\"  \");\r\n                }\r\n                output.push(<br/>)\r\n            }\r\n    \r\n        } catch (error) {\r\n            output.push(\"Matrix doesn't exist, Determinant is zero\")\r\n        }\r\n        this.setState({\r\n            showOutputCard: true\r\n        });          \r\n    }\r\n    \r\n    printFraction (value) {\r\n        return math.format(value, { fraction: 'ratio' })\r\n    }\r\n\r\n    createMatrix(row, column) {\r\n        for (var i=1 ; i<=row ; i++) {\r\n            for (var j=1 ; j<=column ; j++) {\r\n                matrixA.push(<Input style={{\r\n                    width: \"18%\",\r\n                    height: \"50%\", \r\n                    backgroundColor:\"#06d9a0\", \r\n                    marginInlineEnd: \"5%\", \r\n                    marginBlockEnd: \"5%\",\r\n                    color: \"white\",\r\n                    fontSize: \"18px\",\r\n                    fontWeight: \"bold\"\r\n                }} \r\n                id={\"a\"+i+\"\"+j} key={\"a\"+i+\"\"+j} placeholder={\"a\"+i+\"\"+j} />)  \r\n            }\r\n            matrixA.push(<br/>)\r\n            matrixB.push(<Input style={{\r\n                width: \"18%\",\r\n                height: \"50%\", \r\n                backgroundColor:\"black\", \r\n                marginInlineEnd: \"5%\", \r\n                marginBlockEnd: \"5%\",\r\n                color: \"white\",\r\n                fontSize: \"18px\",\r\n                fontWeight: \"bold\"\r\n            }} \r\n            id={\"b\"+i} key={\"b\"+i} placeholder={\"b\"+i} />)\r\n                \r\n            \r\n        }\r\n\r\n        this.setState({\r\n            showDimentionForm: false,\r\n            showDimentionButton: false,\r\n            showMatrixForm: true,\r\n            showMatrixButton: true\r\n        })\r\n        \r\n\r\n    }\r\n    initMatrix() {\r\n        for(var i=0 ; i<this.state.row ; i++) {\r\n            A[i] = []\r\n            for(var j=0 ; j<this.state.column ; j++) {\r\n                A[i][j] = (parseFloat(document.getElementById(\"a\"+(i+1)+\"\"+(j+1)).value));\r\n            }\r\n            B.push(parseFloat(document.getElementById(\"b\"+(i+1)).value));\r\n        }\r\n    }\r\n\r\n    handleChange(event) {\r\n        this.setState({\r\n            [event.target.name]: event.target.value\r\n        });\r\n    }\r\n    render() {\r\n        return(\r\n            <div style={{ background: \"#FFFF\", padding: \"30px\" }}>\r\n                <h2 style={{color: \"black\", fontWeight: \"bold\"}}>Matrix Inversion</h2>\r\n                    {/*-------------Input Card-------------------*/}\r\n                    <Card\r\n                      bordered={true}\r\n                      style={{ width: 400, background: \"#b39eb5\", color: \"#FFFFFFFF\"}}\r\n                      onChange={this.handleChange}\r\n                    >\r\n                        {this.state.showMatrixForm && <div><h2>Matrix [A]</h2><br/>{matrixA}<h2>Vector [B]<br/></h2>{matrixB}</div>}\r\n                        \r\n                        {this.state.showDimentionForm && \r\n                            <div>\r\n                                <h2>Row</h2><Input size=\"large\" name=\"row\" style={InputStyle}></Input>\r\n                                <h2>Column</h2><Input size=\"large\" name=\"column\" style={InputStyle}></Input>\r\n                            </div> \r\n                        }\r\n                        <br></br>\r\n                        {this.state.showDimentionButton && \r\n                            <Button id=\"dimention_button\" onClick= {\r\n                                ()=>this.createMatrix(this.state.row, this.state.column)\r\n                                }  \r\n                                style={{background: \"#4caf50\", color: \"white\", fontSize: \"20px\"}}>\r\n                                Submit<br></br>\r\n                                </Button>\r\n                        }\r\n                        {this.state.showMatrixButton && \r\n                            <Button \r\n                                id=\"matrix_button\"  \r\n                                style={{background: \"blue\", color: \"white\", fontSize: \"20px\"}}\r\n                                onClick={()=>this.inverse(this.state.row)}>\r\n                                Submit\r\n                            </Button>\r\n                        }\r\n                        \r\n                    </Card>\r\n                    {/*----------------Output Card-----------------*/}\r\n                    {this.state.showOutputCard &&\r\n                        <Card\r\n                        title={\"Output\"}\r\n                        bordered={true}\r\n                        style={{ width: 400, background: \"#b39eb5\", color: \"#FFFFFFFF\", float:\"left\"}}\r\n                        onChange={this.handleChange}  id=\"answerCard\">\r\n                            <p style={{fontSize: \"24px\", fontWeight: \"bold\"}}>{output}</p>\r\n                            <p style={{fontSize: \"24px\", fontWeight: \"bold\"}}>X = {JSON.stringify(answer)}</p>\r\n                        </Card>\r\n                    }\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default Inverse;\r\n\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}