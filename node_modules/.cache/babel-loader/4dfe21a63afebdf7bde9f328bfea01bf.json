{"ast":null,"code":"import _defineProperty from \"C:\\\\Users\\\\PC\\\\Desktop\\\\Numerical-method-master\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"C:\\\\Users\\\\PC\\\\Desktop\\\\Numerical-method-master\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\PC\\\\Desktop\\\\Numerical-method-master\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\PC\\\\Desktop\\\\Numerical-method-master\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\PC\\\\Desktop\\\\Numerical-method-master\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\PC\\\\Desktop\\\\Numerical-method-master\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"C:\\\\Users\\\\PC\\\\Desktop\\\\Numerical-method-master\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"C:\\\\Users\\\\PC\\\\Desktop\\\\Numerical-method-master\\\\src\\\\Interpolation\\\\Newton.js\";\nimport React, { Component } from 'react';\nimport { Card, Input, Button, Table } from 'antd';\nimport '../screen.css';\nimport 'antd/dist/antd.css';\nvar InputStyle = {\n  background: \"#1890ff\",\n  color: \"white\",\n  fontWeight: \"bold\",\n  fontSize: \"24px\"\n};\nvar columns = [{\n  title: \"No.\",\n  dataIndex: \"no\",\n  key: \"no\"\n}, {\n  title: \"X\",\n  dataIndex: \"x\",\n  key: \"x\"\n}, {\n  title: \"Y\",\n  dataIndex: \"y\",\n  key: \"y\"\n}];\nvar x, y, tableTag, interpolatePoint, tempTag, fx;\n\nvar Newton =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Newton, _Component);\n\n  function Newton() {\n    var _this;\n\n    _classCallCheck(this, Newton);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Newton).call(this));\n    x = [];\n    y = [];\n    interpolatePoint = [];\n    tempTag = [];\n    tableTag = [];\n    _this.state = {\n      nPoints: 0,\n      X: 0,\n      interpolatePoint: 0,\n      showInputForm: true,\n      showInputButton: true,\n      showTableInput: false,\n      showTableButton: false,\n      showOutputCard: false\n    };\n    _this.handleChange = _this.handleChange.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.newton_difference = _this.newton_difference.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(Newton, [{\n    key: \"createTableInput\",\n    value: function createTableInput(n) {\n      for (var i = 1; i <= n; i++) {\n        x.push(React.createElement(Input, {\n          style: {\n            width: \"100%\",\n            height: \"50%\",\n            backgroundColor: \"black\",\n            marginInlineEnd: \"5%\",\n            marginBlockEnd: \"5%\",\n            color: \"white\",\n            fontSize: \"18px\",\n            fontWeight: \"bold\"\n          },\n          id: \"x\" + i,\n          key: \"x\" + i,\n          placeholder: \"x\" + i,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 56\n          },\n          __self: this\n        }));\n        y.push(React.createElement(Input, {\n          style: {\n            width: \"100%\",\n            height: \"50%\",\n            backgroundColor: \"black\",\n            marginInlineEnd: \"5%\",\n            marginBlockEnd: \"5%\",\n            color: \"white\",\n            fontSize: \"18px\",\n            fontWeight: \"bold\"\n          },\n          id: \"y\" + i,\n          key: \"y\" + i,\n          placeholder: \"y\" + i,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 67\n          },\n          __self: this\n        }));\n        tableTag.push({\n          no: i,\n          x: x[i - 1],\n          y: y[i - 1]\n        });\n      }\n\n      this.setState({\n        showInputForm: false,\n        showInputButton: false,\n        showTableInput: true,\n        showTableButton: true\n      });\n    }\n  }, {\n    key: \"createInterpolatePointInput\",\n    value: function createInterpolatePointInput() {\n      for (var i = 1; i <= this.state.interpolatePoint; i++) {\n        tempTag.push(React.createElement(Input, {\n          style: {\n            width: \"14%\",\n            height: \"50%\",\n            backgroundColor: \"black\",\n            marginInlineEnd: \"5%\",\n            marginBlockEnd: \"5%\",\n            color: \"white\",\n            fontSize: \"18px\",\n            fontWeight: \"bold\"\n          },\n          id: \"p\" + i,\n          key: \"p\" + i,\n          placeholder: \"p\" + i,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 95\n          },\n          __self: this\n        }));\n      }\n    }\n  }, {\n    key: \"initialValue\",\n    value: function initialValue() {\n      x = [];\n      y = [];\n\n      for (var i = 1; i <= this.state.nPoints; i++) {\n        x[i] = parseFloat(document.getElementById(\"x\" + i).value);\n        y[i] = parseFloat(document.getElementById(\"y\" + i).value);\n      }\n\n      for (i = 1; i <= this.state.interpolatePoint; i++) {\n        interpolatePoint[i] = parseInt(document.getElementById(\"p\" + i).value);\n      }\n    }\n  }, {\n    key: \"C\",\n    value: function C(n) {\n      if (n === 1) {\n        return 0;\n      } else {\n        return (y[interpolatePoint[n]] - y[interpolatePoint[n - 1]]) / (x[interpolatePoint[n]] - x[interpolatePoint[n - 1]]) - this.C(n - 1);\n      }\n    }\n  }, {\n    key: \"findX\",\n    value: function findX(n, X) {\n      if (n < 1) {\n        return 1;\n      } else {\n        console.log(X + \" - \" + x[interpolatePoint[n]]);\n        return (X - x[interpolatePoint[n]]) * this.findX(n - 1, X);\n      }\n    }\n  }, {\n    key: \"newton_difference\",\n    value: function newton_difference(n, X) {\n      this.initialValue();\n      fx = y[1];\n\n      if (n === 2) {\n        //if linear interpolate\n        fx += (y[interpolatePoint[2]] - y[interpolatePoint[1]]) / (x[interpolatePoint[2]] - x[interpolatePoint[1]]) * (X - x[interpolatePoint[1]]);\n      } else {\n        for (var i = 2; i <= n; i++) {\n          fx += this.C(i) / (x[interpolatePoint[i]] - x[interpolatePoint[1]]) * this.findX(i - 1, X);\n        }\n      }\n\n      this.setState({\n        showOutputCard: true\n      });\n    }\n  }, {\n    key: \"handleChange\",\n    value: function handleChange(event) {\n      this.setState(_defineProperty({}, event.target.name, event.target.value));\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(\"div\", {\n        style: {\n          padding: \"30px\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 163\n        },\n        __self: this\n      }, React.createElement(\"h2\", {\n        style: {\n          color: \"black\",\n          fontWeight: \"bold\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 164\n        },\n        __self: this\n      }, \"Newton's Divided Differences Interpolation\"), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 165\n        },\n        __self: this\n      }, React.createElement(Card, {\n        bordered: true,\n        style: {\n          width: 400,\n          background: \"#f44336\",\n          color: \"#FFFFFFFF\",\n          float: \"left\"\n        },\n        onChange: this.handleChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 166\n        },\n        __self: this\n      }, this.state.showTableInput && React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 172\n        },\n        __self: this\n      }, React.createElement(Table, {\n        columns: columns,\n        dataSource: tableTag,\n        pagination: false,\n        bordered: true,\n        bodyStyle: {\n          fontWeight: \"bold\",\n          fontSize: \"18px\",\n          color: \"white\",\n          overflowY: \"scroll\",\n          minWidth: 120,\n          maxHeight: 300\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 173\n        },\n        __self: this\n      }), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 174\n        },\n        __self: this\n      }), React.createElement(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 174\n        },\n        __self: this\n      }, \"interpolatePoint \", parseInt(this.state.interpolatePoint) === 2 ? \"(Linear)\" : parseInt(this.state.interpolatePoint) === 3 ? \"(Quadratic)\" : \"(Polynomial)\"), tempTag), this.state.showInputForm && React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 180\n        },\n        __self: this\n      }, React.createElement(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 181\n        },\n        __self: this\n      }, \"Number of points(n)\"), React.createElement(Input, {\n        size: \"large\",\n        name: \"nPoints\",\n        style: InputStyle,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 181\n        },\n        __self: this\n      }), React.createElement(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 182\n        },\n        __self: this\n      }, \"X\"), React.createElement(Input, {\n        size: \"large\",\n        name: \"X\",\n        style: InputStyle,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 182\n        },\n        __self: this\n      }), React.createElement(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 183\n        },\n        __self: this\n      }, \"interpolatePoint\"), React.createElement(Input, {\n        size: \"large\",\n        name: \"interpolatePoint\",\n        style: InputStyle,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 183\n        },\n        __self: this\n      })), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 186\n        },\n        __self: this\n      }), this.state.showInputButton && React.createElement(Button, {\n        id: \"dimention_button\",\n        onClick: function onClick() {\n          _this2.createTableInput(parseInt(_this2.state.nPoints));\n\n          _this2.createInterpolatePointInput();\n        },\n        style: {\n          background: \"#4caf50\",\n          color: \"white\",\n          fontSize: \"20px\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 188\n        },\n        __self: this\n      }, \"Submit\", React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 193\n        },\n        __self: this\n      })), this.state.showTableButton && React.createElement(Button, {\n        id: \"matrix_button\",\n        style: {\n          background: \"blue\",\n          color: \"white\",\n          fontSize: \"20px\"\n        },\n        onClick: function onClick() {\n          return _this2.newton_difference(parseInt(_this2.state.interpolatePoint), parseFloat(_this2.state.X));\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 197\n        },\n        __self: this\n      }, \"Submit\")), this.state.showOutputCard && React.createElement(Card, {\n        title: \"Output\",\n        bordered: true,\n        style: {\n          width: \"50%\",\n          border: \"2px solid black\",\n          background: \"rgb(61, 104, 61) none repeat scroll 0% 0%\",\n          color: \"white\",\n          float: \"left\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 209\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        style: {\n          fontSize: \"24px\",\n          fontWeight: \"bold\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 214\n        },\n        __self: this\n      }, fx))));\n    }\n  }]);\n\n  return Newton;\n}(Component);\n\nexport default Newton;","map":{"version":3,"sources":["C:\\Users\\PC\\Desktop\\Numerical-method-master\\src\\Interpolation\\Newton.js"],"names":["React","Component","Card","Input","Button","Table","InputStyle","background","color","fontWeight","fontSize","columns","title","dataIndex","key","x","y","tableTag","interpolatePoint","tempTag","fx","Newton","state","nPoints","X","showInputForm","showInputButton","showTableInput","showTableButton","showOutputCard","handleChange","bind","newton_difference","n","i","push","width","height","backgroundColor","marginInlineEnd","marginBlockEnd","no","setState","parseFloat","document","getElementById","value","parseInt","C","console","log","findX","initialValue","event","target","name","padding","float","overflowY","minWidth","maxHeight","createTableInput","createInterpolatePointInput","border"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\r\nimport {Card, Input, Button, Table} from 'antd';\r\nimport '../screen.css';\r\nimport 'antd/dist/antd.css';\r\nconst InputStyle = {\r\n    background: \"#1890ff\",\r\n    color: \"white\", \r\n    fontWeight: \"bold\", \r\n    fontSize: \"24px\"\r\n\r\n};\r\nvar columns = [\r\n    {\r\n      title: \"No.\",\r\n      dataIndex: \"no\",\r\n      key: \"no\"\r\n    },\r\n    {\r\n        title: \"X\",\r\n        dataIndex: \"x\",\r\n        key: \"x\"\r\n    },\r\n    {\r\n        title: \"Y\",\r\n        dataIndex: \"y\",\r\n        key: \"y\"\r\n    }\r\n];\r\nvar x, y, tableTag,  interpolatePoint, tempTag, fx\r\n\r\nclass Newton extends Component {\r\n    \r\n    constructor() {\r\n        super();\r\n        x = []\r\n        y = []\r\n        interpolatePoint = []\r\n        tempTag = []\r\n        tableTag = []\r\n        this.state = {\r\n            nPoints: 0,\r\n            X: 0,\r\n            interpolatePoint: 0,\r\n            showInputForm : true,\r\n            showInputButton: true,\r\n            showTableInput: false,\r\n            showTableButton: false,\r\n            showOutputCard: false\r\n        }\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.newton_difference = this.newton_difference.bind(this);\r\n    \r\n    }  \r\n    createTableInput(n) {\r\n        for (var i=1 ; i<=n ; i++) {\r\n            x.push(<Input style={{\r\n                width: \"100%\",\r\n                height: \"50%\", \r\n                backgroundColor:\"black\", \r\n                marginInlineEnd: \"5%\", \r\n                marginBlockEnd: \"5%\",\r\n                color: \"white\",\r\n                fontSize: \"18px\",\r\n                fontWeight: \"bold\"\r\n            }}\r\n            id={\"x\"+i} key={\"x\"+i} placeholder={\"x\"+i}/>);\r\n            y.push(<Input style={{\r\n                width: \"100%\",\r\n                height: \"50%\", \r\n                backgroundColor:\"black\", \r\n                marginInlineEnd: \"5%\", \r\n                marginBlockEnd: \"5%\",\r\n                color: \"white\",\r\n                fontSize: \"18px\",\r\n                fontWeight: \"bold\"\r\n            }} \r\n            id={\"y\"+i} key={\"y\"+i} placeholder={\"y\"+i}/>);   \r\n            tableTag.push({\r\n                no: i,\r\n                x: x[i-1],\r\n                y: y[i-1]\r\n            });\r\n        }\r\n\r\n\r\n        this.setState({\r\n            showInputForm: false,\r\n            showInputButton: false,\r\n            showTableInput: true,\r\n            showTableButton: true\r\n        })\r\n    }\r\n    createInterpolatePointInput(){\r\n        for (var i=1 ; i<=this.state.interpolatePoint ; i++) {\r\n            tempTag.push(<Input style={{\r\n                width: \"14%\",\r\n                height: \"50%\", \r\n                backgroundColor:\"black\", \r\n                marginInlineEnd: \"5%\", \r\n                marginBlockEnd: \"5%\",\r\n                color: \"white\",\r\n                fontSize: \"18px\",\r\n                fontWeight: \"bold\"\r\n            }} \r\n            id={\"p\"+i} key={\"p\"+i} placeholder={\"p\"+i} />)\r\n        }\r\n    }\r\n    initialValue() {\r\n        x = []\r\n        y = []\r\n        for (var i=1 ; i<=this.state.nPoints ; i++) {\r\n            x[i] = parseFloat(document.getElementById(\"x\"+i).value);\r\n            y[i] = parseFloat(document.getElementById(\"y\"+i).value);\r\n        }\r\n        for (i=1 ; i<=this.state.interpolatePoint ; i++) {\r\n            interpolatePoint[i] = parseInt(document.getElementById(\"p\"+i).value);\r\n        }\r\n    }\r\n    C(n) {\r\n        if (n === 1) {\r\n            return 0\r\n        }\r\n        else {\r\n            return ((y[interpolatePoint[n]] - y[interpolatePoint[n-1]]) / (x[interpolatePoint[n]] - x[interpolatePoint[n-1]])) - this.C(n-1)\r\n        }\r\n        \r\n    }\r\n    findX(n, X) {\r\n        if (n < 1) {\r\n            return 1\r\n        }\r\n        else {\r\n            console.log(X + \" - \" + x[interpolatePoint[n]])\r\n            return (X - x[interpolatePoint[n]]) * this.findX(n-1, X)\r\n        }\r\n    }\r\n    newton_difference(n, X) {\r\n        this.initialValue()\r\n        fx = y[1]\r\n        if (n === 2) { //if linear interpolate\r\n            fx += ((y[interpolatePoint[2]] - y[interpolatePoint[1]]) / (x[interpolatePoint[2]] - x[interpolatePoint[1]]))*(X-x[interpolatePoint[1]])\r\n        }\r\n        else {\r\n            for (var i=2 ; i<=n ; i++) {\r\n                fx += (this.C(i) / (x[interpolatePoint[i]] - x[interpolatePoint[1]])) * this.findX(i-1, X)\r\n            }            \r\n        }\r\n\r\n        this.setState({\r\n            showOutputCard: true\r\n        })\r\n\r\n    } \r\n\r\n\r\n    handleChange(event) {\r\n        this.setState({\r\n            [event.target.name]: event.target.value\r\n        });\r\n    }\r\n    render() {\r\n        return(\r\n            <div style={{padding: \"30px\" }}>\r\n                <h2 style={{color: \"black\", fontWeight: \"bold\"}}>Newton's Divided Differences Interpolation</h2>\r\n                <div>\r\n                    <Card\r\n                      bordered={true}\r\n                      style={{ width: 400, background: \"#f44336\", color: \"#FFFFFFFF\", float:\"left\"}}\r\n                      onChange={this.handleChange}\r\n                    >\r\n                        {this.state.showTableInput && \r\n                        <div>\r\n                            <Table columns={columns} dataSource={tableTag} pagination={false} bordered={true} bodyStyle={{fontWeight: \"bold\", fontSize: \"18px\", color: \"white\" , overflowY: \"scroll\", minWidth: 120, maxHeight: 300}}></Table>\r\n                            <br/><h2>interpolatePoint {parseInt(this.state.interpolatePoint) === 2 ? \"(Linear)\": \r\n                                                       parseInt(this.state.interpolatePoint) === 3 ? \"(Quadratic)\" :\r\n                                                       \"(Polynomial)\"}</h2>{tempTag}\r\n                        </div>}\r\n                        \r\n                        {this.state.showInputForm && \r\n                            <div>\r\n                                <h2>Number of points(n)</h2><Input size=\"large\" name=\"nPoints\" style={InputStyle}></Input>\r\n                                <h2>X</h2><Input size=\"large\" name=\"X\" style={InputStyle}></Input>\r\n                                <h2>interpolatePoint</h2><Input size=\"large\" name=\"interpolatePoint\" style={InputStyle}></Input>\r\n                            </div> \r\n                        }\r\n                        <br></br>\r\n                        {this.state.showInputButton && \r\n                            <Button id=\"dimention_button\" onClick= {\r\n                                ()=>{this.createTableInput(parseInt(this.state.nPoints));\r\n                                this.createInterpolatePointInput()}\r\n                            }  \r\n                                style={{background: \"#4caf50\", color: \"white\", fontSize: \"20px\"}}>\r\n                                Submit<br></br>\r\n                            </Button>\r\n                        }\r\n                        {this.state.showTableButton && \r\n                            <Button \r\n                                id=\"matrix_button\"  \r\n                                style={{background: \"blue\", color: \"white\", fontSize: \"20px\"}}\r\n                                onClick={()=>this.newton_difference(parseInt(this.state.interpolatePoint), parseFloat(this.state.X))}>\r\n                                Submit\r\n                            </Button>\r\n                        }\r\n                        \r\n                    </Card>\r\n                    \r\n\r\n                    {this.state.showOutputCard &&\r\n                        <Card\r\n                        title={\"Output\"}\r\n                        bordered={true}\r\n                        style={{width: \"50%\", border: \"2px solid black\", background: \"rgb(61, 104, 61) none repeat scroll 0% 0%\", color: \"white\", float: \"left\"}}\r\n                        >\r\n                        <p style={{fontSize: \"24px\", fontWeight: \"bold\"}}>{fx}</p>\r\n                            \r\n                        </Card>                        \r\n                    }\r\n\r\n                   \r\n                </div>\r\n\r\n                \r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default Newton;\r\n\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}