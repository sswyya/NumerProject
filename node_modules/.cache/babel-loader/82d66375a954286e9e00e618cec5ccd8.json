{"ast":null,"code":"import _defineProperty from \"C:\\\\Users\\\\Lenovo\\\\OneDrive\\\\\\u0E40\\u0E14\\u0E2A\\u0E01\\u0E4C\\u0E17\\u0E47\\u0E2D\\u0E1B\\\\Numerical-method-final\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"C:\\\\Users\\\\Lenovo\\\\OneDrive\\\\\\u0E40\\u0E14\\u0E2A\\u0E01\\u0E4C\\u0E17\\u0E47\\u0E2D\\u0E1B\\\\Numerical-method-final\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\Lenovo\\\\OneDrive\\\\\\u0E40\\u0E14\\u0E2A\\u0E01\\u0E4C\\u0E17\\u0E47\\u0E2D\\u0E1B\\\\Numerical-method-final\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\Lenovo\\\\OneDrive\\\\\\u0E40\\u0E14\\u0E2A\\u0E01\\u0E4C\\u0E17\\u0E47\\u0E2D\\u0E1B\\\\Numerical-method-final\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\Lenovo\\\\OneDrive\\\\\\u0E40\\u0E14\\u0E2A\\u0E01\\u0E4C\\u0E17\\u0E47\\u0E2D\\u0E1B\\\\Numerical-method-final\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\Lenovo\\\\OneDrive\\\\\\u0E40\\u0E14\\u0E2A\\u0E01\\u0E4C\\u0E17\\u0E47\\u0E2D\\u0E1B\\\\Numerical-method-final\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"C:\\\\Users\\\\Lenovo\\\\OneDrive\\\\\\u0E40\\u0E14\\u0E2A\\u0E01\\u0E4C\\u0E17\\u0E47\\u0E2D\\u0E1B\\\\Numerical-method-final\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"C:\\\\Users\\\\Lenovo\\\\OneDrive\\\\\\u0E40\\u0E14\\u0E2A\\u0E01\\u0E4C\\u0E17\\u0E47\\u0E2D\\u0E1B\\\\Numerical-method-final\\\\src\\\\Regression\\\\MultipleLinear.js\";\nimport React, { Component } from 'react';\nimport { Card, Input, Button, Table } from 'antd';\nimport '../screen.css';\nimport 'antd/dist/antd.css';\nimport math from 'mathjs';\nvar InputStyle = {\n  background: \"#F690BB\",\n  color: \"white\",\n  fontWeight: \"bold\",\n  fontSize: \"24px\"\n};\nvar columns = [{\n  title: \"No.\",\n  dataIndex: \"no\",\n  key: \"no\"\n}, {\n  title: \"X\",\n  dataIndex: \"x\",\n  key: \"x\"\n}, {\n  title: \"Y\",\n  dataIndex: \"y\",\n  key: \"y\"\n}];\nvar x, y, tableTag, fx, regressionMatrixX, regressionMatrixY, matrixA, matrixB, answer;\n\nvar MultipleLinear =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(MultipleLinear, _Component);\n\n  function MultipleLinear() {\n    var _this;\n\n    _classCallCheck(this, MultipleLinear);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(MultipleLinear).call(this));\n    x = [];\n    y = [];\n    tableTag = [];\n    _this.state = {\n      nPoints: 0,\n      X: 0,\n      interpolatePoint: 0,\n      showInputForm: true,\n      showInputButton: true,\n      showTableInput: false,\n      showTableButton: false,\n      showOutputCard: false\n    };\n    _this.handleChange = _this.handleChange.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(MultipleLinear, [{\n    key: \"createTableInput\",\n    value: function createTableInput(n, X) {\n      for (var i = 1; i <= n; i++) {\n        x[i] = [];\n\n        for (var j = 1; j <= X; j++) {\n          x[i].push(React.createElement(Input, {\n            style: {\n              width: \"70%\",\n              height: \"50%\",\n              backgroundColor: \"black\",\n              marginInlineEnd: \"5%\",\n              marginBlockEnd: \"5%\",\n              color: \"white\",\n              fontSize: \"18px\",\n              fontWeight: \"bold\",\n              justifyContent: \"center\"\n            },\n            id: \"x\" + i + \"\" + j,\n            key: \"x\" + i + \"\" + j,\n            placeholder: \"x\" + i + \"\" + j,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 58\n            },\n            __self: this\n          }));\n        }\n\n        y.push(React.createElement(Input, {\n          style: {\n            width: \"100%\",\n            height: \"50%\",\n            backgroundColor: \"black\",\n            marginInlineEnd: \"5%\",\n            marginBlockEnd: \"5%\",\n            color: \"white\",\n            fontSize: \"18px\",\n            fontWeight: \"bold\"\n          },\n          id: \"y\" + i,\n          key: \"y\" + i,\n          placeholder: \"y\" + i,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 71\n          },\n          __self: this\n        }));\n        tableTag.push({\n          no: i,\n          x: x[i],\n          y: y[i - 1]\n        });\n      }\n\n      regressionMatrixX = new Array(X + 1);\n      regressionMatrixY = new Array(X + 1);\n\n      for (i = 1; i <= X + 1; i++) {\n        regressionMatrixX[i] = [];\n\n        for (j = 1; j <= X + 1; j++) {\n          regressionMatrixX[i][j] = [];\n        }\n      }\n\n      this.setState({\n        showInputForm: false,\n        showInputButton: false,\n        showTableInput: true,\n        showTableButton: true\n      });\n    }\n  }, {\n    key: \"initialValue\",\n    value: function initialValue(n, X) {\n      x = new Array(X + 1);\n      y = [];\n\n      for (var i = 1; i <= X; i++) {\n        x[i] = [];\n\n        for (var j = 1; j <= n; j++) {\n          x[i][j] = parseInt(document.getElementById(\"x\" + j + \"\" + i).value);\n        }\n      }\n\n      for (i = 1; i <= n; i++) {\n        y[i] = parseFloat(document.getElementById(\"y\" + i).value);\n      }\n    }\n  }, {\n    key: \"multipleLinear\",\n    value: function multipleLinear(n, X) {\n      for (var i = 1; i <= X + 1; i++) {\n        for (var j = i; j <= X + 1; j++) {\n          if (i === 1) {\n            if (j === 1) {\n              regressionMatrixX[i][j] = n;\n              regressionMatrixY[j] = this.summation(y);\n            } else {\n              regressionMatrixX[i][j] = regressionMatrixX[j][i] = this.summation(x[j - 1]);\n              regressionMatrixY[j] = this.summationOfTwo(x[j - 1], y);\n            }\n          } else {\n            regressionMatrixX[i][j] = regressionMatrixX[j][i] = this.summationOfTwo(x[i - 1], x[j - 1]);\n          }\n        }\n      }\n\n      this.findX(X);\n    }\n  }, {\n    key: \"findX\",\n    value: function findX(X) {\n      matrixA = new Array(X + 1);\n      matrixB = new Array(X + 1);\n\n      for (var i = 0; i < X + 1; i++) {\n        matrixA[i] = [];\n\n        for (var j = 0; j < X + 1; j++) {\n          matrixA[i][j] = regressionMatrixX[i + 1][j + 1];\n        }\n\n        matrixB[i] = regressionMatrixY[i + 1];\n      }\n\n      answer = math.squeeze(math.round(math.lusolve(matrixA, matrixB)));\n      console.log(answer);\n    }\n  }, {\n    key: \"summation\",\n    value: function summation(A) {\n      var sum = 0;\n\n      for (var i = 1; i < A.length; i++) {\n        sum += A[i];\n      }\n\n      return sum;\n    }\n  }, {\n    key: \"summationOfTwo\",\n    value: function summationOfTwo(A, B) {\n      var sum = 0;\n\n      for (var i = 1; i < A.length; i++) {\n        sum += A[i] * B[i];\n      }\n\n      return sum;\n    }\n  }, {\n    key: \"handleChange\",\n    value: function handleChange(event) {\n      this.setState(_defineProperty({}, event.target.name, event.target.value));\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(\"div\", {\n        style: {\n          background: \"#FFFF\",\n          padding: \"30px\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 174\n        },\n        __self: this\n      }, React.createElement(\"h2\", {\n        style: {\n          color: \"black\",\n          fontWeight: \"bold\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 175\n        },\n        __self: this\n      }, \"Multiple Linear Regression\"), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 176\n        },\n        __self: this\n      }, React.createElement(Card, {\n        bordered: true,\n        style: {\n          width: \"100%\",\n          background: \"#f44336\",\n          color: \"#FFFFFFFF\",\n          float: \"left\"\n        },\n        onChange: this.handleChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 177\n        },\n        __self: this\n      }, this.state.showInputForm && React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 183\n        },\n        __self: this\n      }, React.createElement(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 184\n        },\n        __self: this\n      }, \"Number of X\"), React.createElement(Input, {\n        size: \"large\",\n        name: \"X\",\n        style: InputStyle,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 184\n        },\n        __self: this\n      }), React.createElement(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 185\n        },\n        __self: this\n      }, \"Number of points(n)\"), React.createElement(Input, {\n        size: \"large\",\n        name: \"nPoints\",\n        style: InputStyle,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 185\n        },\n        __self: this\n      })), this.state.showTableInput && React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 189\n        },\n        __self: this\n      }, React.createElement(Table, {\n        columns: columns,\n        dataSource: tableTag,\n        pagination: false,\n        bordered: true,\n        bodyStyle: {\n          fontWeight: \"bold\",\n          fontSize: \"18px\",\n          color: \"white\",\n          overflowY: \"scroll\",\n          minWidth: 120,\n          maxHeight: 300\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 190\n        },\n        __self: this\n      })), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 193\n        },\n        __self: this\n      }), this.state.showInputButton && React.createElement(Button, {\n        id: \"dimention_button\",\n        onClick: function onClick() {\n          return _this2.createTableInput(parseInt(_this2.state.nPoints), parseInt(_this2.state.X));\n        },\n        style: {\n          background: \"#4caf50\",\n          color: \"white\",\n          fontSize: \"20px\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 195\n        },\n        __self: this\n      }, \"Submit\", React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 198\n        },\n        __self: this\n      })), this.state.showTableButton && React.createElement(Button, {\n        id: \"matrix_button\",\n        style: {\n          background: \"blue\",\n          color: \"white\",\n          fontSize: \"20px\"\n        },\n        onClick: function onClick() {\n          _this2.initialValue(parseInt(_this2.state.nPoints), parseInt(_this2.state.X));\n\n          _this2.multipleLinear(parseInt(_this2.state.nPoints), parseInt(_this2.state.X));\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 202\n        },\n        __self: this\n      }, \"Submit\")), this.state.showOutputCard && React.createElement(Card, {\n        title: \"Output\",\n        bordered: true,\n        style: {\n          width: 400,\n          border: \"2px solid black\",\n          background: \"rgb(61, 104, 61) none repeat scroll 0% 0%\",\n          color: \"white\",\n          float: \"left\",\n          marginInlineStart: \"4%\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 216\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        style: {\n          fontSize: \"24px\",\n          fontWeight: \"bold\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 221\n        },\n        __self: this\n      }, fx))));\n    }\n  }]);\n\n  return MultipleLinear;\n}(Component);\n\nexport default MultipleLinear;","map":{"version":3,"sources":["C:\\Users\\Lenovo\\OneDrive\\เดสก์ท็อป\\Numerical-method-final\\src\\Regression\\MultipleLinear.js"],"names":["React","Component","Card","Input","Button","Table","math","InputStyle","background","color","fontWeight","fontSize","columns","title","dataIndex","key","x","y","tableTag","fx","regressionMatrixX","regressionMatrixY","matrixA","matrixB","answer","MultipleLinear","state","nPoints","X","interpolatePoint","showInputForm","showInputButton","showTableInput","showTableButton","showOutputCard","handleChange","bind","n","i","j","push","width","height","backgroundColor","marginInlineEnd","marginBlockEnd","justifyContent","no","Array","setState","parseInt","document","getElementById","value","parseFloat","summation","summationOfTwo","findX","squeeze","round","lusolve","console","log","A","sum","length","B","event","target","name","padding","float","overflowY","minWidth","maxHeight","createTableInput","initialValue","multipleLinear","border","marginInlineStart"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\r\nimport {Card, Input, Button, Table} from 'antd';\r\nimport '../screen.css';\r\nimport 'antd/dist/antd.css';\r\nimport math from 'mathjs'\r\nconst InputStyle = {\r\n    background: \"#F690BB\",\r\n    color: \"white\", \r\n    fontWeight: \"bold\", \r\n    fontSize: \"24px\"\r\n\r\n};\r\nvar columns = [\r\n    {\r\n        title: \"No.\",\r\n        dataIndex: \"no\",\r\n        key: \"no\"\r\n    },\r\n    {\r\n        title: \"X\",\r\n        dataIndex: \"x\",\r\n        key: \"x\"\r\n    },\r\n    {\r\n        title: \"Y\",\r\n        dataIndex: \"y\",\r\n        key: \"y\"\r\n    }\r\n];\r\nvar x, y, tableTag, fx, regressionMatrixX, regressionMatrixY, matrixA, matrixB, answer\r\n\r\nclass MultipleLinear extends Component {\r\n    \r\n    constructor() {\r\n        super();\r\n        x = []\r\n        y = []\r\n\r\n        tableTag = []\r\n        this.state = {\r\n            nPoints: 0,\r\n            X: 0,\r\n            interpolatePoint: 0,\r\n            showInputForm : true,\r\n            showInputButton: true,\r\n            showTableInput: false,\r\n            showTableButton: false,\r\n            showOutputCard: false\r\n        }\r\n        this.handleChange = this.handleChange.bind(this);\r\n      \r\n    \r\n    }  \r\n    createTableInput(n, X) {\r\n        for (var i=1 ; i<=n ; i++) {\r\n            x[i] = []\r\n            for (var j=1 ; j<=X ; j++) {\r\n                  x[i].push(<Input style={{\r\n                      width: \"70%\",\r\n                      height: \"50%\", \r\n                      backgroundColor:\"black\", \r\n                      marginInlineEnd: \"5%\", \r\n                      marginBlockEnd: \"5%\",\r\n                      color: \"white\",\r\n                      fontSize: \"18px\",\r\n                      fontWeight: \"bold\",\r\n                      justifyContent: \"center\",\r\n                  }}\r\n                  id={\"x\"+i+\"\"+j} key={\"x\"+i+\"\"+j} placeholder={\"x\"+i+\"\"+j}/>);            \r\n            }\r\n            y.push(<Input style={{\r\n                width: \"100%\",\r\n                height: \"50%\", \r\n                backgroundColor:\"black\", \r\n                marginInlineEnd: \"5%\", \r\n                marginBlockEnd: \"5%\",\r\n                color: \"white\",\r\n                fontSize: \"18px\",\r\n                fontWeight: \"bold\"\r\n            }} \r\n            id={\"y\"+i} key={\"y\"+i} placeholder={\"y\"+i}/>);\r\n            tableTag.push({\r\n                no: i,\r\n                x: x[i],\r\n                y: y[i-1]\r\n            })\r\n\r\n        }\r\n        regressionMatrixX = new Array(X+1)\r\n        regressionMatrixY = new Array(X+1)\r\n        for (i=1 ; i<=X+1 ; i++) {\r\n            regressionMatrixX[i] = []\r\n            for (j=1 ; j<=X+1 ; j++) {\r\n                regressionMatrixX[i][j] = []\r\n            }\r\n        }        \r\n    \r\n        this.setState({\r\n            showInputForm: false,\r\n            showInputButton: false,\r\n            showTableInput: true,\r\n            showTableButton: true\r\n        })\r\n    }\r\n    initialValue(n, X) {\r\n        x = new Array(X+1)\r\n        y = []\r\n        for (var i=1 ; i<=X ; i++) {\r\n            x[i] = []\r\n            for (var j=1 ; j<=n ; j++) {\r\n                x[i][j]= parseInt(document.getElementById(\"x\"+j+\"\"+i).value);    \r\n            }   \r\n        }  \r\n        for (i=1 ; i<=n ; i++) {\r\n            y[i] = parseFloat(document.getElementById(\"y\"+i).value);\r\n        }\r\n    }\r\n    multipleLinear(n, X) {\r\n        for (var i=1 ; i<=X+1 ; i++) {\r\n            for (var j=i ; j<=X+1 ; j++) {\r\n               if (i===1) {\r\n                    if (j === 1) {\r\n                        regressionMatrixX[i][j] = n \r\n                        regressionMatrixY[j] = this.summation(y)\r\n                    }\r\n                    else {\r\n                        regressionMatrixX[i][j] = regressionMatrixX[j][i] = this.summation(x[j-1])\r\n                        regressionMatrixY[j] = this.summationOfTwo(x[j-1], y)\r\n                    }\r\n\r\n\r\n               }\r\n               else {\r\n                    regressionMatrixX[i][j] = regressionMatrixX[j][i] = this.summationOfTwo(x[i-1], x[j-1])\r\n               }\r\n            }\r\n        }  \r\n        this.findX(X)\r\n    }\r\n    findX(X) {\r\n        matrixA = new Array(X+1)\r\n        matrixB = new Array(X+1)\r\n        for (var i=0 ; i<X+1 ; i++) {\r\n            matrixA[i] = []\r\n            for (var j=0 ; j<X+1 ; j++) {\r\n                matrixA[i][j] = regressionMatrixX[i+1][j+1]\r\n            }\r\n            matrixB[i] = regressionMatrixY[i+1]\r\n        }\r\n        answer = math.squeeze(math.round(math.lusolve(matrixA, matrixB)))\r\n        console.log(answer)\r\n    }\r\n    summation(A) {\r\n        var sum = 0\r\n        for (var i=1 ; i<A.length ; i++) {\r\n            sum += A[i]\r\n        }\r\n        return sum       \r\n    }\r\n    summationOfTwo(A, B) {\r\n        var sum = 0\r\n        for (var i=1 ; i<A.length ; i++) {\r\n            sum += A[i]*B[i]\r\n        }\r\n        return sum\r\n    }\r\n    handleChange(event) {\r\n        this.setState({\r\n            [event.target.name]: event.target.value\r\n        });\r\n    }\r\n    render() {\r\n        return(\r\n            <div style={{ background: \"#FFFF\", padding: \"30px\" }}>\r\n                <h2 style={{color: \"black\", fontWeight: \"bold\"}}>Multiple Linear Regression</h2>\r\n                <div>\r\n                    <Card\r\n                      bordered={true}\r\n                      style={{ width: \"100%\", background: \"#f44336\", color: \"#FFFFFFFF\", float:\"left\"}}\r\n                      onChange={this.handleChange}\r\n                    >\r\n                        {this.state.showInputForm && \r\n                            <div>\r\n                                <h2>Number of X</h2><Input size=\"large\" name=\"X\" style={InputStyle}></Input>\r\n                                <h2>Number of points(n)</h2><Input size=\"large\" name=\"nPoints\" style={InputStyle}></Input>\r\n                            </div> \r\n                        }                        \r\n                        {this.state.showTableInput && \r\n                        <div>\r\n                            <Table columns={columns} dataSource={tableTag} pagination={false} bordered={true} bodyStyle={{fontWeight: \"bold\", fontSize: \"18px\", color: \"white\" , overflowY: \"scroll\", minWidth: 120, maxHeight: 300}}></Table>\r\n                        </div>\r\n                        }\r\n                        <br></br>\r\n                        {this.state.showInputButton && \r\n                            <Button id=\"dimention_button\" onClick= {\r\n                                ()=> this.createTableInput(parseInt(this.state.nPoints), parseInt(this.state.X))}\r\n                                style={{background: \"#4caf50\", color: \"white\", fontSize: \"20px\"}}>\r\n                                Submit<br></br>\r\n                            </Button>\r\n                        }\r\n                        {this.state.showTableButton && \r\n                            <Button \r\n                                id=\"matrix_button\"  \r\n                                style={{background: \"blue\", color: \"white\", fontSize: \"20px\"}}\r\n                                onClick= {()=> {this.initialValue(parseInt(this.state.nPoints), parseInt(this.state.X)); \r\n                                                this.multipleLinear(parseInt(this.state.nPoints), parseInt(this.state.X))}}\r\n                                >\r\n                                Submit\r\n                            </Button>\r\n                        }\r\n                        \r\n                    </Card>\r\n                    \r\n\r\n                    {this.state.showOutputCard &&\r\n                        <Card\r\n                        title={\"Output\"}\r\n                        bordered={true}\r\n                        style={{width: 400, border: \"2px solid black\", background: \"rgb(61, 104, 61) none repeat scroll 0% 0%\", color: \"white\", float: \"left\", marginInlineStart: \"4%\"}}\r\n                        >\r\n                        <p style={{fontSize: \"24px\", fontWeight: \"bold\"}}>{fx}</p>\r\n                            \r\n                        </Card>                        \r\n                    }\r\n\r\n                   \r\n                </div>\r\n\r\n                \r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default MultipleLinear;"]},"metadata":{},"sourceType":"module"}