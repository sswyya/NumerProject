{"ast":null,"code":"import _defineProperty from \"C:\\\\Users\\\\Lenovo\\\\OneDrive\\\\\\u0E40\\u0E14\\u0E2A\\u0E01\\u0E4C\\u0E17\\u0E47\\u0E2D\\u0E1B\\\\Numerical-method-final\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"C:\\\\Users\\\\Lenovo\\\\OneDrive\\\\\\u0E40\\u0E14\\u0E2A\\u0E01\\u0E4C\\u0E17\\u0E47\\u0E2D\\u0E1B\\\\Numerical-method-final\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\Lenovo\\\\OneDrive\\\\\\u0E40\\u0E14\\u0E2A\\u0E01\\u0E4C\\u0E17\\u0E47\\u0E2D\\u0E1B\\\\Numerical-method-final\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\Lenovo\\\\OneDrive\\\\\\u0E40\\u0E14\\u0E2A\\u0E01\\u0E4C\\u0E17\\u0E47\\u0E2D\\u0E1B\\\\Numerical-method-final\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\Lenovo\\\\OneDrive\\\\\\u0E40\\u0E14\\u0E2A\\u0E01\\u0E4C\\u0E17\\u0E47\\u0E2D\\u0E1B\\\\Numerical-method-final\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\Lenovo\\\\OneDrive\\\\\\u0E40\\u0E14\\u0E2A\\u0E01\\u0E4C\\u0E17\\u0E47\\u0E2D\\u0E1B\\\\Numerical-method-final\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"C:\\\\Users\\\\Lenovo\\\\OneDrive\\\\\\u0E40\\u0E14\\u0E2A\\u0E01\\u0E4C\\u0E17\\u0E47\\u0E2D\\u0E1B\\\\Numerical-method-final\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"C:\\\\Users\\\\Lenovo\\\\OneDrive\\\\\\u0E40\\u0E14\\u0E2A\\u0E01\\u0E4C\\u0E17\\u0E47\\u0E2D\\u0E1B\\\\Numerical-method-final\\\\src\\\\Root of Equation\\\\Newton-raphson.js\";\nimport React, { Component } from 'react';\nimport { Card, Input, Button, Table } from 'antd';\nimport '../screen.css';\nimport 'antd/dist/antd.css';\nimport math from 'mathjs';\nimport Plot from 'react-plotly.js';\nvar InputStyle = {\n  background: \"#F690BB\",\n  color: \"white\",\n  fontWeight: \"bold\",\n  fontSize: \"24px\"\n};\nvar dataInTable;\nvar columns = [{\n  title: \"Iteration\",\n  dataIndex: \"iteration\",\n  key: \"iteration\"\n}, {\n  title: \"X\",\n  dataIndex: \"x\",\n  key: \"x\"\n}, {\n  title: \"Error\",\n  key: \"error\",\n  dataIndex: \"error\"\n}];\nvar xValues = math.range(-10, 10, 0.5).toArray();\nvar fx = \" \";\n\nvar Newton =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Newton, _Component);\n\n  function Newton() {\n    var _this;\n\n    _classCallCheck(this, Newton);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Newton).call(this));\n    _this.state = {\n      fx: \"\",\n      x0: 0,\n      showOutputCard: false,\n      showGraph: false\n    };\n    _this.handleChange = _this.handleChange.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.newton_raphson = _this.newton_raphson.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(Newton, [{\n    key: \"newton_raphson\",\n    value: function newton_raphson(xold) {\n      fx = this.state.fx;\n      var xnew = 0;\n      var epsilon = parseFloat(0.000000);\n      var n = 0;\n      var data = [];\n      data['x'] = [];\n      data['error'] = [];\n\n      do {\n        xnew = xold - this.func(xold) / this.funcDiff(xold);\n        epsilon = this.error(xnew, xold);\n        data['x'][n] = xnew.toFixed(8);\n        data['error'][n] = Math.abs(epsilon).toFixed(8);\n        n++;\n        xold = xnew;\n      } while (Math.abs(epsilon) > 0.000001);\n\n      this.createTable(data['x'], data['error']);\n      this.setState({\n        showOutputCard: true,\n        showGraph: true\n      });\n    }\n  }, {\n    key: \"func\",\n    value: function func(X) {\n      var expr = math.compile(this.state.fx);\n      var scope = {\n        x: parseFloat(X)\n      };\n      return expr.eval(scope);\n    }\n  }, {\n    key: \"funcDiff\",\n    value: function funcDiff(X) {\n      var expr = math.derivative(this.state.fx, 'x');\n      var scope = {\n        x: parseFloat(X)\n      };\n      return expr.eval(scope);\n    }\n  }, {\n    key: \"error\",\n    value: function error(xnew, xold) {\n      return Math.abs((xnew - xold) / xnew);\n    }\n  }, {\n    key: \"createTable\",\n    value: function createTable(x, error) {\n      dataInTable = [];\n\n      for (var i = 0; i < x.length; i++) {\n        dataInTable.push({\n          iteration: i + 1,\n          x: x[i],\n          error: error[i]\n        });\n      }\n    }\n  }, {\n    key: \"handleChange\",\n    value: function handleChange(event) {\n      this.setState(_defineProperty({}, event.target.name, event.target.value));\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(\"div\", {\n        style: {\n          background: \"#FFFF\",\n          padding: \"30px\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105\n        },\n        __self: this\n      }, React.createElement(\"h2\", {\n        style: {\n          color: \"black\",\n          fontWeight: \"bold\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106\n        },\n        __self: this\n      }, \"Newton Raphson\"), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107\n        },\n        __self: this\n      }, React.createElement(Card, {\n        bordered: true,\n        style: {\n          width: 300,\n          background: \"#001529\",\n          color: \"#FFFFFFFF\",\n          float: \"left\"\n        },\n        onChange: this.handleChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108\n        },\n        __self: this\n      }, React.createElement(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113\n        },\n        __self: this\n      }, \"f(x)\"), React.createElement(Input, {\n        size: \"large\",\n        name: \"fx\",\n        style: InputStyle,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113\n        },\n        __self: this\n      }), React.createElement(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114\n        },\n        __self: this\n      }, \"X\", React.createElement(\"sub\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114\n        },\n        __self: this\n      }, \"0\")), React.createElement(Input, {\n        size: \"large\",\n        name: \"x0\",\n        style: InputStyle,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114\n        },\n        __self: this\n      }), React.createElement(Button, {\n        id: \"submit_button\",\n        onClick: function onClick() {\n          return _this2.newton_raphson(parseFloat(_this2.state.x0));\n        },\n        style: {\n          background: \"#4caf50\",\n          color: \"white\",\n          fontSize: \"20px\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 115\n        },\n        __self: this\n      }, \"Submit\")), this.state.showGraph && React.createElement(Card, {\n        title: \"Graph\",\n        bordered: true,\n        style: {\n          width: 500,\n          height: \"75vmin\",\n          border: \"2px solid black\",\n          background: \"#f44aaa6\",\n          color: \"#FFFFFFFF\",\n          float: \"left\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122\n        },\n        __self: this\n      }, React.createElement(Plot, {\n        data: [{\n          x: math.range(-10, 10, 0.5).toArray(),\n          y: xValues.map(function (x) {\n            return math.compile(fx).eval({\n              x: x\n            });\n          }),\n          type: 'scatter',\n          marker: {\n            color: 'red'\n          }\n        }],\n        layout: {\n          title: 'A Fancy Plot'\n        },\n        style: {\n          width: \"100%\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 127\n        },\n        __self: this\n      })), this.state.showOutputCard && React.createElement(Card, {\n        title: \"Output\",\n        bordered: true,\n        style: {\n          width: \"100%\",\n          background: \"#2196f3\",\n          color: \"#FFFFFFFF\",\n          float: \"inline-start\"\n        },\n        id: \"outputCard\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 145\n        },\n        __self: this\n      }, React.createElement(Table, {\n        columns: columns,\n        bordered: true,\n        dataSource: dataInTable,\n        bodyStyle: {\n          fontWeight: \"bold\",\n          fontSize: \"18px\",\n          color: \"black\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 151\n        },\n        __self: this\n      }))));\n    }\n  }]);\n\n  return Newton;\n}(Component);\n\nexport default Newton;","map":{"version":3,"sources":["C:\\Users\\Lenovo\\OneDrive\\เดสก์ท็อป\\Numerical-method-final\\src\\Root of Equation\\Newton-raphson.js"],"names":["React","Component","Card","Input","Button","Table","math","Plot","InputStyle","background","color","fontWeight","fontSize","dataInTable","columns","title","dataIndex","key","xValues","range","toArray","fx","Newton","state","x0","showOutputCard","showGraph","handleChange","bind","newton_raphson","xold","xnew","epsilon","parseFloat","n","data","func","funcDiff","error","toFixed","Math","abs","createTable","setState","X","expr","compile","scope","x","eval","derivative","i","length","push","iteration","event","target","name","value","padding","width","float","height","border","y","map","type","marker"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\r\nimport {Card, Input, Button, Table} from 'antd';\r\nimport '../screen.css';\r\nimport 'antd/dist/antd.css';\r\nimport math from 'mathjs';\r\nimport Plot from 'react-plotly.js';\r\n\r\nconst InputStyle = {\r\n    background: \"#F690BB\",\r\n    color: \"white\", \r\n    fontWeight: \"bold\", \r\n    fontSize: \"24px\"\r\n\r\n};\r\nvar dataInTable;\r\nconst columns = [\r\n    {\r\n      title: \"Iteration\",\r\n      dataIndex: \"iteration\",\r\n      key: \"iteration\"\r\n    },\r\n    {\r\n        title: \"X\",\r\n        dataIndex: \"x\",\r\n        key: \"x\"\r\n    },\r\n    {\r\n      title: \"Error\",\r\n      key: \"error\",\r\n      dataIndex: \"error\"\r\n    }\r\n];\r\n  const xValues = math.range(-10, 10, 0.5).toArray();\r\n  var fx = \" \";\r\nclass Newton extends Component {\r\n    \r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            fx: \"\",\r\n            x0: 0,\r\n            showOutputCard: false,\r\n            showGraph: false\r\n        }\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.newton_raphson = this.newton_raphson.bind(this);\r\n    }\r\n\r\n    newton_raphson(xold) {\r\n        fx = this.state.fx;\r\n        var xnew = 0;\r\n        var epsilon= parseFloat(0.000000);\r\n        var n=0;\r\n        var data  = []\r\n        data['x'] = []\r\n        data['error'] = []\r\n        do{ \r\n            xnew = xold - (this.func(xold)/this.funcDiff(xold));\r\n            epsilon = this.error(xnew, xold)\r\n            data['x'][n] =  xnew.toFixed(8);\r\n            data['error'][n] = Math.abs(epsilon).toFixed(8);\r\n            n++;  \r\n            xold = xnew;\r\n        }while(Math.abs(epsilon)>0.000001);\r\n\r\n        this.createTable(data['x'], data['error']);\r\n        this.setState({\r\n            showOutputCard: true,\r\n            showGraph: true\r\n        })\r\n\r\n        \r\n    }\r\n    func(X) {\r\n        var expr = math.compile(this.state.fx);\r\n        let scope = {x:parseFloat(X)};\r\n        return expr.eval(scope);        \r\n    }\r\n    funcDiff(X) {\r\n        var expr = math.derivative(this.state.fx, 'x');\r\n        let scope = {x:parseFloat(X)};\r\n        return expr.eval(scope); \r\n    }\r\n    error(xnew, xold) {\r\n        return Math.abs((xnew-xold) / xnew);\r\n    }\r\n    createTable(x, error) {\r\n        dataInTable = []\r\n        for (var i=0 ; i<x.length ; i++) {\r\n            dataInTable.push({\r\n                iteration: i+1,\r\n                x: x[i],\r\n                error: error[i]\r\n            });\r\n        }\r\n    \r\n    }\r\n    handleChange(event) {\r\n        this.setState({\r\n            [event.target.name]: event.target.value\r\n        });\r\n    }\r\n    render() {\r\n        return(\r\n            <div style={{ background: \"#FFFF\", padding: \"30px\" }}>\r\n                <h2 style={{color: \"black\", fontWeight: \"bold\"}}>Newton Raphson</h2>\r\n                <div>\r\n                    <Card\r\n                    bordered={true}\r\n                    style={{ width: 300, background: \"#001529\", color: \"#FFFFFFFF\", float:\"left\"}}\r\n                    onChange={this.handleChange}\r\n                    >\r\n                        <h2>f(x)</h2><Input size=\"large\" name=\"fx\" style={InputStyle}></Input>\r\n                        <h2>X<sub>0</sub></h2><Input size=\"large\" name=\"x0\" style={InputStyle}></Input>\r\n                        <Button id=\"submit_button\" onClick= {\r\n                                ()=>this.newton_raphson(parseFloat(this.state.x0))\r\n                            }  \r\n                        style={{background: \"#4caf50\", color: \"white\", fontSize: \"20px\"}}>Submit</Button>\r\n                        \r\n                    </Card>\r\n                    {this.state.showGraph &&\r\n                        <Card\r\n                        title={\"Graph\"}\r\n                        bordered={true}\r\n                        style={{ width: 500,height: \"75vmin\",  border:\"2px solid black\", background: \"#f44aaa6\", color: \"#FFFFFFFF\", float:\"left\"}}\r\n                        >\r\n                            <Plot\r\n                                data={[\r\n                                {\r\n                                    x: math.range(-10, 10, 0.5).toArray(),\r\n                                    y: xValues.map(function (x) {\r\n                                        return math.compile(fx).eval({x: x})\r\n                                    }),\r\n                                    type: 'scatter',\r\n                                    marker: {color: 'red'},\r\n                                },\r\n                                ]}\r\n                                layout={ {title: 'A Fancy Plot'} }\r\n                                \r\n                                style={{width: \"100%\"}}\r\n                            />  \r\n                        </Card>                        \r\n                    }\r\n                    {this.state.showOutputCard && \r\n                        <Card\r\n                        title={\"Output\"}\r\n                        bordered={true}\r\n                        style={{width: \"100%\", background: \"#2196f3\", color: \"#FFFFFFFF\", float:\"inline-start\"}}\r\n                        id=\"outputCard\"\r\n                        >\r\n                            <Table columns={columns} bordered={true} dataSource={dataInTable} bodyStyle={{fontWeight: \"bold\", fontSize: \"18px\", color: \"black\"}}\r\n                            ></Table>\r\n                        </Card>\r\n                    }                    \r\n                </div>\r\n\r\n                \r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default Newton;"]},"metadata":{},"sourceType":"module"}